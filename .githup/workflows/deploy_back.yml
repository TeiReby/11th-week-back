# .github/workflows/deploy-backend-to-eb.yml
name: "Deploy Backend to Elastic Beanstalk"

# main 브랜치에 push(=merge) 될 때만 실행
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build & Deploy to EB
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 의존성 설치 (Backend)
        working-directory: ./backend   # monorepo라면 backend 디렉터리에서
        run: |
          npm ci
          npm run build               # (필요 시) 빌드 스크립트 실행

      - name: EB 배포를 위한 ZIP 패키지 생성
        working-directory: ./backend
        run: |
          # EB는 애플리케이션 파일 전체가 들어있는 ZIP을 입출력으로 요구
          zip -r ../backend-deploy.zip ./*

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Elastic Beanstalk에 애플리케이션 업로드
        # eb-cli를 사용하지 않고 AWS CLI로도 가능하나, 여기서는 aws-cli 배포 예시
        run: |
          # 1) EB 애플리케이션 버전 생성 (SourceBundle S3 업로드)
          aws s3 cp backend-deploy.zip s3://YOUR_EB_S3_BUCKET/backend-deploy-${{ github.sha }}.zip

          aws elasticbeanstalk create-application-version \
            --application-name YOUR_EB_APP_NAME \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket="YOUR_EB_S3_BUCKET",S3Key="backend-deploy-${{ github.sha }}.zip"

          # 2) EB 환경 업데이트 (deploy)
          aws elasticbeanstalk update-environment \
            --environment-name YOUR_EB_ENV_NAME \
            --version-label ${{ github.sha }}
